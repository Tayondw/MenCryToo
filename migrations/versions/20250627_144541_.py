"""empty message

Revision ID: 0d8177d47731
Revises: performance_indexes
Create Date: 2025-06-27 14:45:41.319301

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy import text


# revision identifiers, used by Alembic.
revision = "0d8177d47731"
down_revision = "performance_indexes"
branch_labels = None
depends_on = None


def index_exists(index_name, table_name):
    """Check if an index exists before trying to drop it"""
    connection = op.get_bind()
    result = connection.execute(
        text(
            """
        SELECT COUNT(*) 
        FROM pg_indexes 
        WHERE indexname = :index_name 
        AND tablename = :table_name
    """
        ),
        {"index_name": index_name, "table_name": table_name},
    )
    return result.scalar() > 0


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("attendances", schema=None) as batch_op:
        if index_exists("idx_attendances_event_id", "attendances"):
            batch_op.drop_index("idx_attendances_event_id")
        if index_exists("idx_attendances_user_id", "attendances"):
            batch_op.drop_index("idx_attendances_user_id")

    with op.batch_alter_table("comments", schema=None) as batch_op:
        if index_exists("idx_comments_parent_id", "comments"):
            batch_op.drop_index("idx_comments_parent_id")
        if index_exists("idx_comments_post_id", "comments"):
            batch_op.drop_index("idx_comments_post_id")
        if index_exists("idx_comments_user_id", "comments"):
            batch_op.drop_index("idx_comments_user_id")

    with op.batch_alter_table("events", schema=None) as batch_op:
        if index_exists("idx_events_group_id", "events"):
            batch_op.drop_index("idx_events_group_id")
        if index_exists("idx_events_start_date", "events"):
            batch_op.drop_index("idx_events_start_date")
        # This is the problematic line - idx_events_type doesn't exist
        # if index_exists('idx_events_type', 'events'):
        #     batch_op.drop_index('idx_events_type')
        if index_exists("idx_events_venue_id", "events"):
            batch_op.drop_index("idx_events_venue_id")
        batch_op.create_index(
            batch_op.f("ix_events_created_at"), ["created_at"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_events_end_date"), ["end_date"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_events_group_id"), ["group_id"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_events_name"), ["name"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_events_start_date"), ["start_date"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_events_type"), ["type"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_events_venue_id"), ["venue_id"], unique=False
        )

    with op.batch_alter_table("groups", schema=None) as batch_op:
        if index_exists("idx_groups_city", "groups"):
            batch_op.drop_index("idx_groups_city")
        if index_exists("idx_groups_created_at", "groups"):
            batch_op.drop_index("idx_groups_created_at")
        if index_exists("idx_groups_name", "groups"):
            batch_op.drop_index("idx_groups_name")
        if index_exists("idx_groups_organizer_id", "groups"):
            batch_op.drop_index("idx_groups_organizer_id")
        if index_exists("idx_groups_state", "groups"):
            batch_op.drop_index("idx_groups_state")
        if index_exists("idx_groups_type", "groups"):
            batch_op.drop_index("idx_groups_type")
        batch_op.create_index(batch_op.f("ix_groups_city"), ["city"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_groups_created_at"), ["created_at"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_groups_name"), ["name"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_groups_organizer_id"), ["organizer_id"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_groups_state"), ["state"], unique=False)
        batch_op.create_index(batch_op.f("ix_groups_type"), ["type"], unique=False)

    with op.batch_alter_table("memberships", schema=None) as batch_op:
        if index_exists("idx_memberships_group_id", "memberships"):
            batch_op.drop_index("idx_memberships_group_id")
        if index_exists("idx_memberships_user_id", "memberships"):
            batch_op.drop_index("idx_memberships_user_id")

    with op.batch_alter_table("posts", schema=None) as batch_op:
        if index_exists("idx_posts_created_at", "posts"):
            batch_op.drop_index("idx_posts_created_at")
        if index_exists("idx_posts_creator", "posts"):
            batch_op.drop_index("idx_posts_creator")
        batch_op.create_index(
            batch_op.f("ix_posts_created_at"), ["created_at"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_posts_creator"), ["creator"], unique=False)
        batch_op.create_index(batch_op.f("ix_posts_title"), ["title"], unique=False)

    with op.batch_alter_table("users", schema=None) as batch_op:
        if index_exists("idx_users_created_at", "users"):
            batch_op.drop_index("idx_users_created_at")
        if index_exists("idx_users_first_name", "users"):
            batch_op.drop_index("idx_users_first_name")
        if index_exists("idx_users_last_name", "users"):
            batch_op.drop_index("idx_users_last_name")
        batch_op.create_index(
            batch_op.f("ix_users_created_at"), ["created_at"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_users_email"), ["email"], unique=True)
        batch_op.create_index(
            batch_op.f("ix_users_first_name"), ["first_name"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_users_last_name"), ["last_name"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_users_username"), ["username"], unique=True
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_users_username"))
        batch_op.drop_index(batch_op.f("ix_users_last_name"))
        batch_op.drop_index(batch_op.f("ix_users_first_name"))
        batch_op.drop_index(batch_op.f("ix_users_email"))
        batch_op.drop_index(batch_op.f("ix_users_created_at"))
        batch_op.create_index("idx_users_last_name", ["last_name"], unique=False)
        batch_op.create_index("idx_users_first_name", ["first_name"], unique=False)
        batch_op.create_index("idx_users_created_at", ["created_at"], unique=False)

    with op.batch_alter_table("posts", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_posts_title"))
        batch_op.drop_index(batch_op.f("ix_posts_creator"))
        batch_op.drop_index(batch_op.f("ix_posts_created_at"))
        batch_op.create_index("idx_posts_creator", ["creator"], unique=False)
        batch_op.create_index("idx_posts_created_at", ["created_at"], unique=False)

    with op.batch_alter_table("memberships", schema=None) as batch_op:
        batch_op.create_index("idx_memberships_user_id", ["user_id"], unique=False)
        batch_op.create_index("idx_memberships_group_id", ["group_id"], unique=False)

    with op.batch_alter_table("groups", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_groups_type"))
        batch_op.drop_index(batch_op.f("ix_groups_state"))
        batch_op.drop_index(batch_op.f("ix_groups_organizer_id"))
        batch_op.drop_index(batch_op.f("ix_groups_name"))
        batch_op.drop_index(batch_op.f("ix_groups_created_at"))
        batch_op.drop_index(batch_op.f("ix_groups_city"))
        batch_op.create_index("idx_groups_type", ["type"], unique=False)
        batch_op.create_index("idx_groups_state", ["state"], unique=False)
        batch_op.create_index("idx_groups_organizer_id", ["organizer_id"], unique=False)
        batch_op.create_index("idx_groups_name", ["name"], unique=False)
        batch_op.create_index("idx_groups_created_at", ["created_at"], unique=False)
        batch_op.create_index("idx_groups_city", ["city"], unique=False)

    with op.batch_alter_table("events", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_events_venue_id"))
        batch_op.drop_index(batch_op.f("ix_events_type"))
        batch_op.drop_index(batch_op.f("ix_events_start_date"))
        batch_op.drop_index(batch_op.f("ix_events_name"))
        batch_op.drop_index(batch_op.f("ix_events_group_id"))
        batch_op.drop_index(batch_op.f("ix_events_end_date"))
        batch_op.drop_index(batch_op.f("ix_events_created_at"))
        batch_op.create_index("idx_events_venue_id", ["venue_id"], unique=False)
        batch_op.create_index("idx_events_type", ["type"], unique=False)
        batch_op.create_index("idx_events_start_date", ["start_date"], unique=False)
        batch_op.create_index("idx_events_group_id", ["group_id"], unique=False)

    with op.batch_alter_table("comments", schema=None) as batch_op:
        batch_op.create_index("idx_comments_user_id", ["user_id"], unique=False)
        batch_op.create_index("idx_comments_post_id", ["post_id"], unique=False)
        batch_op.create_index("idx_comments_parent_id", ["parent_id"], unique=False)

    with op.batch_alter_table("attendances", schema=None) as batch_op:
        batch_op.create_index("idx_attendances_user_id", ["user_id"], unique=False)
        batch_op.create_index("idx_attendances_event_id", ["event_id"], unique=False)

    # ### end Alembic commands ###
